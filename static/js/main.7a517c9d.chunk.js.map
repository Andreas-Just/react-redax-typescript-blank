{"version":3,"sources":["store/loading.ts","constants/actionTypes.ts","store/flights.ts","helpers/api.ts","store/index.ts","store/selectors.ts","App.tsx","index.tsx"],"names":["setError","error","type","initialState","loading","loaded","reduce","loadingState","action","departure","arrival","flightsState1","body","today","Date","toISOString","split","reverse","join","getFlights","day","fetch","then","response","json","rootReducer","combineReducers","loadingReducer","flights","flightsReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","getFlightsAll","state","App","dispatch","useDispatch","useSelector","selectors","useEffect","a","message","className","Header","as","map","flight","key","ID","JSON","stringify","ReactHtmlParser","airline","en","about","Root","ReactDOM","render","document","getElementById"],"mappings":"6ZAwBaA,EAAW,eAACC,EAAD,uDAAS,GAAT,MAAiC,CACvDC,KCvBuB,YDwBvBD,UASIE,EAA6B,CACjCC,SAAS,EACTC,QAAQ,EACRJ,MAAO,IAoBMK,EAfA,WAAuE,IAAtEC,EAAqE,uDAAtDJ,EAAcK,EAAwC,uCACnF,OAAQA,EAAON,MACb,IC7CyB,gBD8CvB,OAAO,2BAAKK,GAAZ,IAA0BH,SAAS,IACrC,IC9CsB,aD+CpB,OAAO,2BAAKG,GAAZ,IAA0BF,QAAQ,IACpC,IC/CqB,YDgDnB,OAAO,2BAAKE,GAAZ,IAA0BN,MAAOO,EAAOP,QAC1C,IChD0B,iBDiDxB,OAAO,2BAAKM,GAAZ,IAA0BH,SAAS,IACrC,QACE,OAAOG,IEpCPJ,EAA6B,CACjCM,UAAW,GACXC,QAAS,IAmBIJ,EAhBA,WAGK,IAFlBK,EAEiB,uDAFDR,EAEC,yCADfD,EACe,EADfA,KAAMU,EACS,EADTA,KAER,OAAQV,GACN,IDvBwB,eCwBtB,OAAO,2BACFS,GADL,IAEEF,UAAWG,EAAKH,UAChBC,QAASE,EAAKF,UAElB,QACE,OAAOC,IC5BPE,GAAQ,IAAIC,MACfC,cAAcC,MAAM,KAAK,GACzBA,MAAM,KAAKC,UAAUC,KAAK,KAEhBC,EAAa,kBATNC,EAS8BP,EARzCQ,MAAM,GAAD,OAHE,qCAGF,OAAcD,IACvBE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,WAQ5BF,MAAK,qBAAGV,QAVK,IAAIQ,GCYdK,EAAcC,0BAAgB,CAClCtB,QAASuB,EACTC,QAASC,IA8BIC,EALDC,sBACZN,EACAO,8BAAoBC,0BAAgBC,OCnCzBC,EAAgB,SAACC,GAAD,OAAsBA,EAAMR,S,OCmC1CS,MAnCf,WACE,IAAMC,EAAWC,cACXX,EAAUY,YAAYC,GAM5B,OAJAC,qBAAU,WACRJ,EFYF,uCAAO,WAAOA,GAAP,eAAAK,EAAA,6DACLL,EJXmD,CACrDpC,KChB2B,kBGyBpB,kBAImBiB,IAJnB,OAIGS,EAJH,OAMHU,EFxByD,CAC7DpC,KDH0B,eCI1BU,KEsByBgB,IACrBU,EJX2C,CAC/CpC,KCrBwB,eGwBjB,gDASHoC,EAAStC,EAAS,KAAM4C,UATrB,QAYLN,EJnBqD,CACvDpC,KChB4B,mBGsBrB,yDAAP,yDEXG,CAACoC,IAGF,yBAAKO,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQD,UAAU,aAAaE,GAAG,MAAlC,iBACA,6BACE,wBAAIF,UAAU,YACXjB,EAAQnB,UAAUuC,KAAI,SAAAC,GAAM,OAC3B,wBAAIC,IAAKD,EAAOE,IACd,0BAAMN,UAAU,YACbO,KAAKC,UACJJ,EACA,CACE,KAAM,OAAQ,SAAU,SACxB,mBAAoB,SACpB,gBAAiB,aAEnB,IAGHK,IAAgBL,EAAOM,QAAQC,GAAGC,eCvB3CC,EAAO,kBACX,kBAAC,IAAD,CAAU5B,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,SAKN6B,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,W","file":"static/js/main.7a517c9d.chunk.js","sourcesContent":["import { Action } from 'redux';\nimport {\n  START_LOADING,\n  SET_LOADED,\n  SET_ERROR,\n  FINISH_LOADING,\n} from '../constants/actionTypes';\n\ntype StartLoadingAction = Action<typeof START_LOADING>;\ntype FinishLoadingAction = Action<typeof FINISH_LOADING>;\ntype SetLoadedAction = Action<typeof SET_LOADED>;\ntype SetErrorAction = Action<typeof SET_ERROR> & {\n  error: string;\n};\n\nexport const startLoading = (): StartLoadingAction => ({\n  type: START_LOADING,\n});\nexport const finishLoading = (): FinishLoadingAction => ({\n  type: FINISH_LOADING,\n});\nexport const setLoaded = (): SetLoadedAction => ({\n  type: SET_LOADED,\n});\nexport const setError = (error = ''): SetErrorAction => ({\n  type: SET_ERROR,\n  error,\n});\n\nexport type LoadingState = {\n  loading: boolean;\n  loaded: boolean;\n  error: string;\n};\n\nconst initialState: LoadingState = {\n  loading: false,\n  loaded: false,\n  error: '',\n};\n\ntype LoadingAction = StartLoadingAction | SetLoadedAction | SetErrorAction | FinishLoadingAction;\n\nconst reduce = (loadingState = initialState, action: LoadingAction): LoadingState => {\n  switch (action.type) {\n    case START_LOADING:\n      return { ...loadingState, loading: true };\n    case SET_LOADED:\n      return { ...loadingState, loaded: true };\n    case SET_ERROR:\n      return { ...loadingState, error: action.error };\n    case FINISH_LOADING:\n      return { ...loadingState, loading: false };\n    default:\n      return loadingState;\n  }\n};\n\nexport default reduce;\n","export const START_LOADING = 'START_LOADING';\nexport const SET_LOADED = 'SET_LOADED';\nexport const SET_ERROR = 'SET_ERROR';\nexport const FINISH_LOADING = 'FINISH_LOADING';\n\nexport const INIT_FLIGHTS = 'INIT_FLIGHTS';\n","import { Action } from 'redux';\nimport { INIT_FLIGHTS } from '../constants/actionTypes';\n\ntype FlightsAction = Action<typeof INIT_FLIGHTS> & {\n  body: IFlights;\n};\n\nexport const initFlights = (body: IFlights): FlightsAction => ({\n  type: INIT_FLIGHTS,\n  body,\n});\n\nexport type FlightsState = {\n  [key: string]: IFlight[];\n  departure: IFlight[];\n  arrival: IFlight[];\n};\n\nconst initialState: FlightsState = {\n  departure: [],\n  arrival: [],\n};\n\nconst reduce = (\n  flightsState1 = initialState,\n  { type, body }: FlightsAction,\n): FlightsState => {\n  switch (type) {\n    case INIT_FLIGHTS:\n      return {\n        ...flightsState1,\n        departure: body.departure,\n        arrival: body.arrival,\n      };\n    default:\n      return flightsState1;\n  }\n};\n\nexport default reduce;\n","const API_URL = 'https://api.iev.aero/api/flights/';\n\nconst getData = <T>(day: string): Promise<T[]> => {\n  return fetch(`${API_URL}${day}`)\n    .then(response => response.json());\n};\n\nconst today = new Date()\n  .toISOString().split('T')[0]\n  .split('-').reverse().join('-');\n\nexport const getFlights = () => getData<IFlights>(today)\n  .then(({ body }: any) => body);\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport { Dispatch } from 'react';\n\nimport loadingReducer, {\n  setError, finishLoading, startLoading, setLoaded,\n} from './loading';\nimport flightsReducer, { initFlights } from './flights';\nimport { getFlights } from '../helpers/api';\n\n/**\n * Each concrete reducer will receive all the actions but only its part of the state\n */\nconst rootReducer = combineReducers({\n  loading: loadingReducer,\n  flights: flightsReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\n/**\n * Thunk - is a function that should be used as a normal action creator dispatch(loadFlights())\n */\nexport const loadFlights = () => {\n  return async (dispatch: Dispatch<any>) => {\n    dispatch(startLoading());\n\n    try {\n      const flights = await getFlights();\n\n      dispatch(initFlights(flights));\n      dispatch(setLoaded());\n    } catch (error) {\n      dispatch(setError(error.message));\n    }\n\n    dispatch(finishLoading());\n  };\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { RootState } from './index';\n\n/**\n * Selectors - a function receiving Redux state and returning some data from it\n */\nexport const getLoading = (state: RootState) => state.loading.loading;\nexport const getLoaded = (state: RootState) => state.loading.loaded;\nexport const getError = (state: RootState) => state.loading.error;\nexport const getFlightsAll = (state: RootState) => state.flights;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ReactHtmlParser from 'react-html-parser';\nimport { Header } from 'semantic-ui-react';\nimport { loadFlights } from './store';\nimport * as selectors from './store/selectors';\nimport './App.scss';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const flights = useSelector(selectors.getFlightsAll);\n\n  useEffect(() => {\n    dispatch(loadFlights());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Header className=\"App-header\" as=\"h2\">Second Header</Header>\n      <pre>\n        <ul className=\"App-List\">\n          {flights.departure.map(flight => (\n            <li key={flight.ID}>\n              <code className=\"App-Code\">\n                {JSON.stringify(\n                  flight,\n                  [\n                    'ID', 'term', 'status', 'gateNo',\n                    'airportToID.city', 'actual',\n                    'codeShareData', 'codeShare',\n                  ],\n                  2,\n                )}\n              </code>\n              {ReactHtmlParser(flight.airline.en.about)}\n            </li>\n          ))}\n        </ul>\n      </pre>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\n\nimport 'semantic-ui-css/semantic.min.css';\nimport './assets/scss/index.scss';\n\nimport App from './App';\nimport store from './store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}